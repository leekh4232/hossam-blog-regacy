---
layout: post
title:  "[Toy Project] Next.js와 Express 병합"
date:   2023-07-20
banner_image: index-toyproject.jpg
tags: [Toy Project]
---

Backend와 Frontend가 각각 독립적인 시스템으로 구축되어 서로 연동하는 것이 이상적인 형태이겠지만 웹호스팅을 사용하는 경우 두개의 호스팅 계정을 만들지 않은 이상은 하나의 웹 서버안에서 Frontend와 Backend를 모두 처리해야 한다. 그렇기 때문에 우선적으로 구성해야 하는 환경은 Next.js에 백엔드 시스템을 병합하는 것이다.

Next.js 자체적으로 API Route 기능을 제공하기는 하지만 백엔드 시스템으로 사용하기에는 다소 부족한 부분이 있기 때문에 Express를 병합하기로 하였다.

<!--more-->

# #01. 패키지 설치

Express와 미들웨어 패키지들을 아래와 같이 설치하였다.

| 패키지 명 | 설명 |
|--|--|
| express | Node.js 기반으로 백엔드를 구현할 수 있게 하는 패키지(필수) |
| method-override | express에 PUT, DELETE 메서드를 처리할 수 있게 하는 미들웨어 |
| cors | CORS 관련 설정을 처리하는 미들웨어 |
| dotenv | 환경설정파일인 `*.env` 파일을 로드하는 미들웨어 |
| express-fileupload | 파일 업로드 처리 미들웨어 |
| express-session | 세션 사용 미들웨어 |
| express-useragent | 브라우저의 UserAgent 기능 사용 미들웨어 |
| cookie-parser | 쿠키를 처리하는 미들웨어 |
| serve-favicon | favicon 설정 미들웨어 | 
| serve-static | public 폴더 지정 미들웨어 |
| winston | 로그 처리 패키지 |
| winston-daily-rotate-file | 로그 파일을 날짜별로 생성할 수 있게 하는 미들웨어 |
| express-winston | Express로의 HTTP 요청을 로그로 기록할 수 있게 하는 미들웨어 |
| node-schedule | 스케쥴러 사용 패키지 |
| node-thumbnail | 썸네일 이미지 생성 패키지 |
| nodemailer | 메일 발송을 위해 SMTP와 연동할 수 있는 기능을 제공하는 패키지 |
| mysql2 | MySQL Client 패키지 |
| mybatis-mapper | MyBatis의 Node.js 버전 |
| express-mysql-session | DB세션을 사용할 수 있게 하는 미들웨어 | 
| bcrypt | 암호화 처리 패키지 |
| passport | 로그인 및 인증 기능을 제공하는 패키지 |
| passport-local | 로컬 인증 기능을 제공하는 패키지 |
| passport-jwt | jwt 방식 토큰 발생을 가능하게 하는 패키지 |
| passport-jwt-cookiecombo | jwt 토큰을 쿠키에 자동으로 저장하고 읽어오는 패키지(HTTPS 필수) |
| fs-file-tree | 특정 폴더의 하위 항목들을 조회하는 패키지 |

일일이 설치하는 과정은 번거롭기 때문에 아래 명령으로 일괄 설치하도록 처리했다.

```shell
$ yarn add express method-override cors dotenv express-fileupload express-session express-useragent cookie-parser serve-favicon serve-static winston winston-daily-rotate-file express-winston node-schedule node-thumbnail nodemailer mysql2 mybatis-mapper express-mysql-session bcrypt passport passport-local passport-jwt passport-jwt-cookiecombo fs-file-tree
```

# #02. SSL 인증서 만들기

로그인 등의 인증 기능을 구현하기 위해서는 HTTPS 접근이 필수적으로 요구된다.

Express를 로컬 환경에서 HTTPS 상태로 구동하기 위해서 SSL 인증서를 생성한다.

## 1. 인증서가 저장될 디렉토리 생성

우선 SSL 인증서가 저장될 디렉토리를 `.ssl`로 생성하고 해당 디렉토리로 이동한다.

```shell
$ mkdir .ssl
$ cd .ssl
```

## 2. 개인키 생성

```shell
$ openssl genrsa 1024 > private.pem
```

## 3. 공개키 생성

```shell
openssl req -x509 -new -key private.pem > public.pem
```

공개키 생성 과정에서 일련의 입력 과정이 있는데 아래와 같이 진행하였다.

```shell
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:KO
State or Province Name (full name) [Some-State]:Seoul
Locality Name (eg, city) []:Seoul
Organization Name (eg, company) [Internet Widgits Pty Ltd]:hossam.kr
Organizational Unit Name (eg, section) []:Personal
Common Name (e.g. server FQDN or YOUR name) []:Lee K.H
Email Address []:leekh4232@gmail.com
```

# #03. 환경설정 파일 생성

프로젝트 루트 디렉토리에 `.env.development` 파일과 `.env.production` 파일을 생성한다.

`.env.development` 파일은 개발용 환경 변수를 저장하고 있는 파일이고 `.env.production`은 빌드시에 참조되는 환경설정 파일이다.

필요한 설정값들은 관련 작업시마다 추가하기로 하고 일단은 최소한의 값들만 지정해 놓았다.

## 1. .env.developement

```env
################################################
# .env.development
# 개발용 환경설정파일
################################################

# Next.js 환경변수 설정
NEXT_PUBLIC_FRONTEND_URL = "https://localhost:3000"
NEXT_PUBLIC_API_BASE_URL = "https://localhost:3000/api"
NEXT_PUBLIC_ADMIN_BASE_URL = "https://localhost:3000/admin"

# 작동 포트 번호
PORT = 3000
```

## 2. .env.production

```env
################################################
# .env.production
# 배포용 환경설정파일
################################################

# Next.js 환경변수 설정
NEXT_PUBLIC_FRONTEND_URL = "https://myweb.hossam.kr"
NEXT_PUBLIC_API_BASE_URL = "https://myweb.hossam.kr/api"
NEXT_PUBLIC_ADMIN_BASE_URL = "https://myweb.hossam.kr/admin"

# 작동 포트 번호
PORT = 80
```